/**
 * The movie database
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Movie', 'model/Problem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Movie'), require('../model/Problem'));
  } else {
    // Browser globals (root is window)
    if (!root.TheMovieDatabase) {
      root.TheMovieDatabase = {};
    }
    root.TheMovieDatabase.DefaultApi = factory(root.TheMovieDatabase.ApiClient, root.TheMovieDatabase.Movie, root.TheMovieDatabase.Problem);
  }
}(this, function(ApiClient, Movie, Problem) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.1
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addMovie operation.
     * @callback module:api/DefaultApi~addMovieCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movie} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new movie
     * @param {module:model/Movie} movie The new movie
     * @param {module:api/DefaultApi~addMovieCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movie}
     */
    this.addMovie = function(movie, callback) {
      var postBody = movie;

      // verify the required parameter 'movie' is set
      if (movie == undefined || movie == null) {
        throw "Missing the required parameter 'movie' when calling addMovie";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Movie;

      return this.apiClient.callApi(
        '/movies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMovieById operation.
     * @callback module:api/DefaultApi~deleteMovieByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a movie
     * @param {Integer} id ID of the movie
     * @param {module:api/DefaultApi~deleteMovieByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMovieById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteMovieById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/movies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMovieById operation.
     * @callback module:api/DefaultApi~getMovieByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movie} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single movie
     * @param {Integer} id ID of the movie
     * @param {module:api/DefaultApi~getMovieByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movie}
     */
    this.getMovieById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getMovieById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Movie;

      return this.apiClient.callApi(
        '/movies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMovies operation.
     * @callback module:api/DefaultApi~getMoviesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Movie>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all movies
     * @param {module:api/DefaultApi~getMoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Movie>}
     */
    this.getMovies = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Movie];

      return this.apiClient.callApi(
        '/movies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMovieById operation.
     * @callback module:api/DefaultApi~updateMovieByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movie} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing movie
     * @param {Integer} id ID of the movie
     * @param {module:model/Movie} movie The movie
     * @param {module:api/DefaultApi~updateMovieByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movie}
     */
    this.updateMovieById = function(id, movie, callback) {
      var postBody = movie;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateMovieById";
      }

      // verify the required parameter 'movie' is set
      if (movie == undefined || movie == null) {
        throw "Missing the required parameter 'movie' when calling updateMovieById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Movie;

      return this.apiClient.callApi(
        '/movies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
