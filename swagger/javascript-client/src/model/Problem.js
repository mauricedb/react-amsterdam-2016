/**
 * The movie database
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TheMovieDatabase) {
      root.TheMovieDatabase = {};
    }
    root.TheMovieDatabase.Problem = factory(root.TheMovieDatabase.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Problem model module.
   * @module model/Problem
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>Problem</code>.
   * @alias module:model/Problem
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>Problem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Problem} obj Optional instance to populate.
   * @return {module:model/Problem} The populated <code>Problem</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'Integer');
      }
      if (data.hasOwnProperty('detail')) {
        obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
      }
      if (data.hasOwnProperty('instance')) {
        obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
      }
    }
    return obj;
  }

  /**
   * An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML). 
   * @member {String} type
   * @default 'about:blank'
   */
  exports.prototype['type'] = 'about:blank';
  /**
   * A short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized); example: Service Unavailable 
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem. 
   * @member {Integer} status
   */
  exports.prototype['status'] = undefined;
  /**
   * A human readable explanation specific to this occurrence of the problem. 
   * @member {String} detail
   */
  exports.prototype['detail'] = undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. 
   * @member {String} instance
   */
  exports.prototype['instance'] = undefined;



  return exports;
}));


